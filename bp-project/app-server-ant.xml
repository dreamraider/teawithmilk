<?xml version="1.0" encoding="UTF-8"?>

<!-- Copyright 2005-2006 Sun Microsystems, Inc.  All rights reserved.  You may not modify, use, reproduce, or distribute this software except in compliance with the terms of the License at: 
 http://developer.sun.com/berkeley_license.html
 $Id: app-server-ant.xml,v 1.9 2008/09/04 18:58:13 ie139813 Exp $ -->

<!-- This file defines various Java EE SDK specific tasks. 
     This file is not meant to be included in a project directly. 
     @Author Inderjeet Singh -->
<project name="app-server-ant" default="compile">

    <!-- Define sensible defaults for app-server properties -->
    <property file="${ant.file.app-server-ant}/../app-server.properties"/>
  
    <!-- This file contains common ant commands that are specific to Java EE
    SDK. To port this application to a different app-server, you will 
    need to write an equivalent file. 
    You must include main.xml before including this file -->

    <target name="tools" depends="check">
        <condition property="javaee-script-suffix" value=".bat">
            <os family="windows"/>
        </condition>
        <condition property="javaee-script-suffix" value="">
            <not>
                <os family="windows"/>
            </not>
        </condition>
        <condition property="path.separator" value=";">
            <os family="windows"/>
        </condition>
        <condition property="path.separator" value=":">
            <not>
                <os family="windows"/>
            </not>
        </condition>
        <!-- setup properties for various Java EE tools -->
        <property name="asadmin" value="${javaee.home}/bin/asadmin${javaee-script-suffix}"/>
        <condition property="appclient.prefix" value="${javaee.home}/glassfish">
            <istrue value="${is.glassfish.v3}" />
        </condition>
        <condition property="appclient.prefix" value="${javaee.home}">
            <isfalse value="${is.glassfish.v3}" />
        </condition>
        <property name="appclient" value="${appclient.prefix}/bin/appclient${javaee-script-suffix}"/>
    </target>
    <available property="is.glassfish.v3" file="${javaee.home}/glassfish/modules"/>
    <condition property="javaee.classpath.prefix" value="${javaee.home}/glassfish/modules">
        <istrue value="${is.glassfish.v3}"/>
    </condition>
    <condition property="javaee.classpath.prefix" value="${javaee.home}/lib">
        <isfalse value="${is.glassfish.v3}"/>
    </condition>
    <property name="glassfish.endorsed.option" value="-endorseddirs ${javaee.classpath.prefix}/endorsed" />

    <!-- Construct Java EE classpath -->
    <path id="javaee.classpath">
        <fileset dir="${javaee.classpath.prefix}">
            <include name="**/*.jar"/>
        </fileset>
    </path>

    <target name="bpp-run-app-client" depends="tools">
        <echo message="running application client container."/>
        <exec executable="${appclient}">
            <arg line=" -client ${app-client.jar}"/>
        </exec>
    </target>

    <target name="bpp-run-secure-app-client" depends="tools">
        <echo message="running application client container."/>
        <exec executable="${appclient}">
            <arg line=" -client ${app-client.jar}"/>
            <arg line="-name ${app-client.name}"/>
            <arg line="-textauth"/>
            <arg line="-user ${file.realm.user.id}"/>
            <arg line="-password ${file.realm.user.password}"/>
            <arg line="-xml ${javaee.domaindir}/config/sun-acc.xml"/>
            <arg line="${appclient.application.args}"/>
        </exec>
    </target>

    <target name="start-domain" depends="tools"
        description="starts application server default domain">
        <echo message="Starting default domain for ${javaee.home}"/>
        <exec executable="${asadmin}" failonerror="true">
            <arg line=" start-domain"/>
        </exec>
        <waitfor>
            <http url="http://${javaee.server.name}:${javaee.server.port}"/>
        </waitfor>
    </target>

    <target name="stop-domain" depends="tools"
        description="stops application server default domain">
        <echo message="Stopping default domain for ${javaee.home}"/>
        <exec executable="${asadmin}" failonerror="true">
            <arg line=" stop-domain"/>
        </exec>
    </target>

    <target name="keygen-common" depends="tools"
        description="create file-realm user">

        <echo message="Generating key for user ${app.user} in server."/>

        <!-- generate temporary password file -->
        <property name="user.password.file" value="asadminuserpassword.txt"/>
        <delete file="${user.password.file}" failonerror="false"/>
        <loadproperties srcFile="${javaee.server.passwordfile}"/>

        <condition property="app.password" value="${app.user}">
            <not>
                <isset property="app.password"/>
            </not>
        </condition>

        <!-- do not format the following echo which is intentional -->
        <echo file="${user.password.file}" append="false">AS_ADMIN_USERPASSWORD=${app.password}
        AS_ADMIN_PASSWORD=${AS_ADMIN_PASSWORD}</echo>

        <exec executable="${asadmin}">
            <arg line=" --user ${javaee.server.username}" />
            <arg line=" --passwordfile '${user.password.file}'" />
            <arg line=" --host ${javaee.server.name}" />
            <arg line=" --port ${javaee.adminserver.port}" />
            <arg line=" create-file-user"/>
            <arg line=" --groups ${app.groups}"/>
            <arg line=" ${app.user}"/>
        </exec>
        <delete file="${user.password.file}" failonerror="false"/>
    </target>


    <target name="keydel-common" depends="tools"
        description="delete file-realm user">
        <echo message="Deleting key for user ${app.user} in server."/>
        <exec executable="${asadmin}">
            <arg line=" --host ${javaee.server.name}" />
            <arg line=" --port ${javaee.adminserver.port}" />
            <arg line=" delete-file-user"/>
            <arg line=" ${app.user}"/>
        </exec>
    </target>

    <target name="start-db" depends="tools" description="starts the databse server.">
        <exec executable="${asadmin}" failonerror="${failonerror}" dir="${javaee.home}">
            <arg value="start-database"/>
            <arg value="--dbhost=${javaee.server.name}"/>
            <arg value="--dbport=${db.port}"/>
            <arg value="--dbhome=${db.home}"/>
        </exec>
    </target>
  
    <target name="stop-db" depends="tools" description="stops the database server.">
        <exec executable="${asadmin}" failonerror="${failonerror}" dir="${javaee.home}">
            <arg value="stop-database"/>
            <arg value="--dbhost=${javaee.server.name}"/>
            <arg value="--dbport=${db.port}" />
        </exec> 
    </target>

    <target name="create-jdbc-connection-pool" depends="tools" 
        description="creates jdbc connection pool">
        <fail unless="db.sid" message="The property db.sid must be set before invoking this target. Otherwise there is no database to use."/>
        <fail unless="pool.name" message="The property pool.name must be set before invoking this target. Otherwise there is no pool to use with the jdbc resource."/>
        <exec executable="${asadmin}">
            <arg line=" --host ${javaee.server.name}" />
            <arg line=" --port ${javaee.adminserver.port}" />
            <arg line=" create-jdbc-connection-pool"/>
            <arg line=" --datasourceclassname ${db.datasource}" />
            <arg line=" --restype javax.sql.XADataSource " />
            <arg line=" --property portNumber=${db.port}:serverName=${javaee.server.name}:User=${db.user}:Password=${db.password}:databaseName=${db.sid}" />
            <arg line=" ${pool.name} " />
        </exec> 
    </target>
 
    <target name="create-jdbc-resource"  depends="tools"
        description="creates jdbc resource">
        <fail unless="pool.name" message="The property pool.name must be set before invoking this target. Otherwise there is no pool to use with the jdbc resource."/>
        <fail unless="jdbc.resource.name" message="The property jdbc.resource.name must be set before invoking this target. Otherwise there is no JDBC resource to create."/>
        <exec executable="${asadmin}">
            <arg line=" --host ${javaee.server.name}" />
            <arg line=" --port ${javaee.adminserver.port}" />
            <arg line="create-jdbc-resource"/>
            <arg line=" --connectionpoolid ${pool.name}" />
            <arg line=" --enabled=true" />
            <arg line=" ${jdbc.resource.name}" />
        </exec>     
    </target>

    <target name="create-jdbc-realm" depends="tools"
        description="create JDBC security realm">
        <fail unless="jdbc.resource.name" message="The property jdbc.resource.name must be set before invoking this target. Otherwise there is no JDBC resource to specify."/>
        <exec executable="${asadmin}">
            <arg line=" --host ${javaee.server.name}" />
            <arg line=" --port ${javaee.adminserver.port}" />
            <arg line="create-auth-realm"/>
            <arg line=" --classname com.sun.enterprise.security.auth.realm.jdbc.JDBCRealm" />
            <arg line=" --property jaas-context=jdbcRealm:datasource-jndi=${jdbc.resource.name}:user-table=${user.table.name}:user-name-column=${user.name.column}:password-column=${password.column}:group-table=${group.table}:group-name-column=${group.name.column}:assign-groups=${assign.groups}:digest-algorithm=${digest.algorithm}"/>
            <arg line=" ${jdbc.realm.name}"/>    
        </exec>     
    </target>

    <target name="create-persistence-resource" depends="tools"
        description="creates persistence resource">
        <exec executable="${asadmin}">
            <arg line="create-persistence-resource"/>
            <arg line=" --host ${javaee.server.name}" />
            <arg line=" --port ${javaee.adminserver.port}" />
            <arg line=" --factoryclass com.sun.jdo.spi.persistence.support.sqlstore.impl.PersistenceManagerFactoryImpl" />
            <arg line=" --jdbcjndiname ${jdbc.resource.name}" />
            <arg line=" ${pm.resource.name}" />
        </exec>
    </target>

    <target name="create-connector-connection-pool" depends="tools"
       description="creates connector connection pool">
       <fail unless="connector.pool.name" message="The property connector.pool.name must be set before invoking this target.
       Otherwise there is no pool to use with the connector resource."/>
       <exec executable="${asadmin}">
           <arg line=" --host ${javaee.server.name}" />
           <arg line=" --port ${javaee.adminserver.port}" />
           <arg line=" create-connector-connection-pool"/>
           <arg line=" --connectiondefinition ${connectiondefinition.name}" />
           <arg line=" --raname ${ra.name}" />
           <arg line="${optional.attributes}"/>
           <arg line=" ${connector.pool.name} " />
       </exec>
    </target>

     <target name="create-connector-resource"  depends="tools"
       description="creates connector resource">
       <fail unless="connector.pool.name" message="The property connector.pool.name must be set before invoking this target.
       Otherwise there is no pool to use with the connector resource."/>
       <fail unless="connector.resource.name" message="The property connector.resource.name must be set before invoking this target.
       Otherwise there is no Connector resource to create."/>
        <exec executable="${asadmin}">
           <arg line=" --host ${javaee.server.name}" />
           <arg line=" --port ${javaee.adminserver.port}" />
           <arg line="create-connector-resource"/>
           <arg line=" --poolname ${connector.pool.name}" />
           <arg line=" --enabled=true" />
           <arg line=" ${connector.resource.name}" />
       </exec>
     </target>

    <target name="create-jms-resource"  depends="tools"
        description="creates jms destination resource">
        <exec executable="${asadmin}">
            <arg line=" --host ${javaee.server.name}" />
            <arg line=" --port ${javaee.adminserver.port}" />
            <arg line="create-jms-resource"/>
            <arg line=" --restype ${jms.restype}" />
            <arg line=" --enabled=true" />
            <arg line=" --property ${jms.resource.property}" />
            <arg line=" ${jms.resource.name}" />
        </exec>
    </target>

    <target name="create-jms-connection-factory"  depends="tools"
        description="creates jms connection factory">
        <exec executable="${asadmin}">
            <arg line=" --host ${javaee.server.name}" />
            <arg line=" --port ${javaee.adminserver.port}" />
            <arg line="create-jms-resource"/>
            <arg line=" --restype ${jms.restype}" />
            <arg line=" --enabled=true" />
            <arg line=" ${jms.resource.name}" />
        </exec>
    </target>

    <target name="create-jms-connection-factory-prop"  depends="tools"
        description="creates jms connection factory that allows you to set a property on the connection">
        <exec executable="${asadmin}">
            <arg line=" --host ${javaee.server.name}" />
            <arg line=" --port ${javaee.adminserver.port}" />
            <arg line="create-jms-resource"/>
            <arg line=" --restype ${jms.restype}" />
            <arg line=" --enabled=true" />
            <arg line=" --property ${jms.resource.property}" />
            <arg line=" ${jms.resource.name}" />
        </exec>
    </target>

    <target name="create-javamail-resource"  depends="tools"
        description="creates javamail resource">
        <exec executable="${asadmin}">
            <arg line=" --host ${javaee.server.name}" />
            <arg line=" --port ${javaee.adminserver.port}" />
            <arg line="create-javamail-resource"/>
            <arg line=" --mailhost ${mail.host}" />
            <arg line=" --mailuser ${mail.username}" />
            <arg line=" --fromaddress ${mail.fromaddress}" />
            <arg line=" --transprotocol ${mail.transportprotocol}" />
            <arg line=" --transprotocolclass ${mail.transportprotocolclass}" />
            <arg line=" --storeprotocol ${mail.storeprotocol}" />
            <arg line=" --storeprotocolclass ${mail.storeprotocolclass}" />
            <arg line=" ${javamail.resource.name}" />
        </exec>
    </target>

    <target name="delete-javamail-resource"  depends="tools"
        description="deletes javamail resource">
        <exec executable="${asadmin}">
            <arg line=" --host ${javaee.server.name}" />
            <arg line=" --port ${javaee.adminserver.port}" />
            <arg line="delete-javamail-resource"/>
            <arg line=" ${javamail.resource.name}" />
        </exec>
    </target>

    <target name="listJmsDestinations" description="lists jms destinations" depends="tools">
        <exec executable="${asadmin}">
            <arg line=" --host ${javaee.server.name}" />
            <arg line=" --port ${javaee.adminserver.port}" />
            <arg line="list-jmsdest"/>
        </exec>
    </target>

    <target name="delete-persistence-resource"
        description="deletes persistence resource" depends="tools">
        <exec executable="${asadmin}">
            <arg line=" --host ${javaee.server.name}" />
            <arg line=" --port ${javaee.adminserver.port}" />
            <arg line="delete-persistence-resource"/>
            <arg line=" ${pm.resource.name}" />
        </exec>
    </target>

    <target name="delete-jdbc-resource"
        description="deletes jdbc resource" depends="tools">
        <fail unless="jdbc.resource.name" message="The property jdbc.resource.name must be set before invoking this target. Otherwise there is no JDBC resource to delete."/>
        <exec executable="${asadmin}">
            <arg line=" --host ${javaee.server.name}" />
            <arg line=" --port ${javaee.adminserver.port}" />
            <arg line="delete-jdbc-resource"/>
            <arg line="${jdbc.resource.name}" />
        </exec>
    </target>

    <target name="delete-jdbc-connection-pool"
        description="deletes jdbc connection pool" depends="tools">
        <fail unless="pool.name" message="The property pool.name must be set before invoking this target. Otherwise there is no JDBC pool to delete."/>
        <exec executable="${asadmin}">
            <arg line=" --host ${javaee.server.name}" />
            <arg line=" --port ${javaee.adminserver.port}" />
            <arg line="delete-jdbc-connection-pool"/>
            <arg line="${pool.name}" />
        </exec>
    </target>

    <target name="delete-connector-resource"
      description="deletes connector resource" depends="tools">
      <fail unless="connector.resource.name" message="The property connector.resource.name must be set before invoking this target.
      Otherwise there is no connector resource to delete."/>
       <exec executable="${asadmin}">
          <arg line=" --host ${javaee.server.name}" />
          <arg line=" --port ${javaee.adminserver.port}" />
          <arg line="delete-connector-resource"/>
          <arg line="${connector.resource.name}" />
      </exec>
    </target>

    <target name="delete-connector-connection-pool"
      description="deletes connector connection pool" depends="tools">
      <fail unless="connector.pool.name" message="The property connector.pool.name must be set before invoking this target. 
      Otherwise there is no connector pool to delete."/>
       <exec executable="${asadmin}">
          <arg line=" --host ${javaee.server.name}" />
          <arg line=" --port ${javaee.adminserver.port}" />
          <arg line="delete-connector-connection-pool"/>
          <arg line="${connector.pool.name}" />
      </exec>
    </target>

    <target name="delete-jdbc-realm"
        description="deletes jdbc security realm" depends="tools">
        <exec executable="${asadmin}">
            <arg line=" --host ${javaee.server.name}" />
            <arg line=" --port ${javaee.adminserver.port}" />
            <arg line="delete-auth-realm"/>
            <arg line="${jdbc.realm.name}" />
        </exec>
    </target>

    <target name="delete-jms-resource"
        description="deletes jms resource" depends="tools">
        <exec executable="${asadmin}">
            <arg line=" --host ${javaee.server.name}" />
            <arg line=" --port ${javaee.adminserver.port}" />
            <arg line="delete-jms-resource"/>
            <arg line=" ${jms.resource.name}" />
        </exec>
    </target>

    <target name="reconfig" depends="tools"
        description="reconfigures the application server">
        <echo message="Reconfiguring server ${appserver.instance}"/>
        <exec executable="${asadmin}">
            <arg line=" --host ${javaee.server.name}" />
            <arg line=" --port ${javaee.adminserver.port}" />
            <arg line=" reconfig"/>
            <arg line=" ${appserver.instance}"/>
        </exec>      
    </target>
  
    <target name="undeploy" depends="tools"
        description="undeploys the application">
        <echo message="Undeploying ${module.name}." />
        <exec executable="${asadmin}">
            <arg line=" --host ${javaee.server.name}" />
            <arg line="undeploy"/>
            <arg line=" ${module.name} " />
        </exec> 
    </target>


    <!-- The deployment process is stop the build if there is an error
    in the deployment process. To change this behavior define the
    property failonerror to be false. -->
    <property name="run.uri" value="${module.name}"/>
    <target name="run-deploy" depends="deploy"/>
    <target name="deploy" depends="tools,-pre-deploy"
        description="deploys the application">
        <fail unless="app.module" message="app.module must be set before invoking this target. Otherwise there is no application to deploy."/>
        <fail unless="module.name" message="app.name must be set before invoking this target. Otherwise there is no application to deploy."/>
        <condition property="app.url" value="http://${javaee.server.name}:${javaee.server.port}/${run.uri}">
            <not>
                <isset property="app.endpointuri"/>
            </not>
        </condition>
        <property name="failonerror" value="true"/>
        <exec executable="${asadmin}" failonerror="${failonerror}">
            <arg line=" --host ${javaee.server.name}" />
            <arg line=" --port ${javaee.adminserver.port}" />
            <arg line=" deploy "/>
            <arg line=" --name ${module.name}"/>
            <arg line=" --force=true "/>
            <arg line=" --upload=true "/>
            <arg line=" --dbvendorname ${db.vendorname}"/>
            <arg line="${app.module}" />
        </exec>
        <antcall target="deploy-url-message"/>
    </target>

    <target name="deploy-url-message" if="app.url">
        <echo message="Application Deployed at: ${app.url}"/>
    </target>

    <target name="client-jar" depends="tools">
        <exec executable="${asadmin}" failonerror="${failonerror}">
            <arg line=" --host ${javaee.server.name}" />
            <arg line=" --port ${javaee.adminserver.port}" />
            <arg line=" get-client-stubs "/>
            <arg line=" --appname ${module.name}"/>
            <arg line="${client.jar.dir}" />
        </exec>
        <copy
            file="./client-jar/${module.name}Client.jar"
            tofile="client-jar/appClient.jar"
            failonerror="false">
        </copy>
    </target>

    <target name="add-resources" depends="tools">
        <exec executable="${asadmin}" failonerror="${failonerror}">
            <arg line=" --host ${javaee.server.name}" />
            <arg line=" --port ${javaee.adminserver.port}" />
            <arg line=" add-resources "/>
            <arg line="${resources.file}" />
        </exec>
    </target>

    <target name="check" description="verify the build setup which is common for all modules">
        <fail unless="javaee.home">
            Property javaee.home not specified.  
            Please specify the javaee.home property in 'bp-project/build.properties'.
        </fail>
    
    </target>

    <available property="has.resource.file" file="${resource.dir}" />
    <target name="copy-resource-file" if="has.resource.file">
        <mkdir dir="${resource.target.dir}" />
        <copy todir="${resource.target.dir}" 
              failonerror="false">
            <fileset dir="${resource.dir}" />
        </copy>
    </target>


    <!-- Dummy placeholder targets. They can be overridden by application build file -->
    <target name="-pre-deploy"/>
  
</project>
